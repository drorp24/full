
Todo:
  Now:
    Styling:
    Forms: 
      Formik:
        ✔ Learn `Formik` @done(19-01-15 13:57)
        ✔ Learn its integration with MUI [There's none] @done(19-01-15 13:58)
        ✔ Decide whether to use it or stick with home-made forms @done(19-01-15 13:58)
        ✔ Document my decision in the proper note @done(19-01-15 13:59)
        HomeMade:
        ✔ Keep the home-made version (Yup.js), don't override it with Formik @done(19-01-20 20:38)
    Onboarding, self-select model (https://material.io/design/communication/onboarding.html#self-select-model):
      ✔ Check Formik before doing any of the following @done(19-01-15 13:57)
      ✔ Commit a working form @done(19-01-15 14:14)
      ✘ Replace the link/button duplicate with one single <Link /> component (released today!) @cancelled(19-01-15 14:19)
      ✔ Add a mobile stepper bar (https://material-ui.com/demos/steppers/#mobile-stepper-progress) @done(19-01-15 18:18)
      ✔ Let the mobile stepper button be the link @done(19-01-15 18:18)
      ✔ Make a vertical stepper @started(19-01-15 18:19) @done(19-01-15 20:19) @lasted(2h40s)
      ✔ Formikate VerticalStepper.js (in a separate file!) @started(19-01-16 12:43) @done(19-01-17 16:00) @lasted(1d3h17m40s)
      ✔ concentrate all state handling to a custom hook that's outside of the SearchForm. @done(19-01-17 16:15)
      ✔ Consolidate ProductForm and ServiceForm into one Form whose fields are generated according to 'steps' @done(19-01-20 20:37)
      ✔ Make HoC for injecting state, steps and schema into the generic form utility functions @done(19-01-20 20:37)
      ✘ Extract the state hook into its own separate custom hook @cancelled(19-01-20 20:37)
      ✔ Replace wrapping div with new <Box /> and try to doing w/o makeStyle/useStyles @done(19-01-21 15:02)
      ✔ Solve the red Email issue @done(19-01-27 17:13)
      ✔ Add the atomic MUI component responsible for underline and check it receives status @done(19-01-28 20:56)
      ✔ Move visitUntouched to formUtilities @done(19-01-29 18:14)
      ✔ Make the delivery checkbox a switch @done(19-01-30 14:50)
      ✔ Change the switch helperText color and add a line iff switch is on @done(19-01-30 19:32)
      ✔ Prefix every field with an icon @done(19-02-02 23:33)
      ✔ Make the title & subtitle fonts proportionate to the container @done(19-02-03 12:56)
      ✔ Create a time picker @done(19-02-04 00:50)
      ✔ Apply MD style to the forms' fields by using MUI components for the form @done(19-01-30 19:32)
      ✔ Validate the next two pages @done(19-02-02 23:33)
      ✔ Learn MUI Grid @done(19-01-30 19:32)
      ✔ Add a title, complete the page to adhere to MD's self-select model @done(19-01-30 11:43)
      ✔ Add a results page, which will eventually contain the list returned from server @done(19-02-04 23:53)
      One-Step, search Form:
        ✔ Move delivery switch to 1st page @done(19-02-05 00:11)
        ✔ Discard 2nd page. Wrap it in some component and save it for later stages (order) @done(19-02-06 00:39)
        ✔ Generated part 2: insert the populateFormState logic into useFormState, no useEffect may be needed! @done(19-02-06 14:59)
        ✔ Consider generifying the DotsMobileStepper to handle both multi-step and single-step forms. @done(19-02-06 16:11)
        ☐ Add a 'look around' switch to first page, and a box to write the user's location
        ☐ Add a live, subscription-based rate*amount of selected currency (bank, our lowest, whatever I can find)
        ☐ (?) Only if place permits, and it helps: consider adding a google location box, that turning 'lokk around' switch populates with current location 
    Search:
      GraphQL Server:
        ☐ Update the GraphQL resolver  / mongoose query to address the form's content
        ☐ Create the live, subscription-based rate server-side query 
        ☐ Update the crypto subscription query (server)
      GraphQL Client:
        ☐ Update the GraphQL client gql query to address the form's content
        ☐ Create the live, subscription-based rate client-side query 
        ☐ Update the crypto subscription query (client)
      Merchants list:
        ☐ Either place the gql query in the component file (think CC-in-JS) or make the query accept parameters
        ☐ Respond to query result by displaying a (unedited yet) list of merchants
        ☐ Use grid to style the list items (https://material-ui.com/layout/grid/#complex-grid) 
      Endless Scrolling:
        ☐ Use <ErrorBoundary>, <Suspense> and React.lazy to lazy-load new merchants when scroll reaches page bottom
    Map:
      ☐ Create a google map component whose center is user's location displaying nearby merchants
      ☐ Add walking / driving instructionswhether to use header or footer (read a bit?)
    Header / Footer:
      ☐ Create a branded header
      ☐ Create a footer with action icons
      ☐ Place a list/map toggle icon on either of them, and let it toggle b/w map | list 
    Card:
      ☐ Create a merchant card
       ☐ Make a list click link t   o mer chant's card
    Menu:
      ☐ Consider creating a left-drawer menu
  Later:
    https:
      ☐ Support httpsß
    Server-side rendering:
        Styles:
          ☐ server-render styles (https://www.styled-components.com/docs/advanced#server-side-rendering)
          ☐ Avoid discrepancy with client-rendered styles (requires https://www.styled-components.com/docs/tooling#babel-plugin)
    Performance:
      ☐ What is the reason for the 21M
      ☐ Why the unresposiveness and wrong selects
      ☐ Roboto was fetched with all variants
      ☐ Why is Form called for every keystroke
    Desktop:
      ☐ When on desktop, confine display to a left pane and show map with merchants (a-la google maps, old cambiu)



  


  
