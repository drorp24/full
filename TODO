
Todo:
  Purpose:
    ☐ Demonstrate proficiency with live, sophisticated product
    ☐ Do it in as few as possible screens. One, two would be ideal
  Demonstrate:
    Serverless:
      ☐ AWS API Gateway 
      ☐ AWS Lambda
    Typescript:
      ☐ At least some of the components
    Fetching:
      Assets:
        ☐ Amazon CloudFront
      External Data: 
        REST API:
        ✔ CryptoCompare, Google places @done(19-02-12 16:48)
        Websockets:
        ✔ GDAX @done(19-02-12 17:30)
      Internal Data:
        stores:
          ✔ MongoDB @done(19-02-12 15:57)
          ✔ mongoose @done(19-02-12 15:58)
          ✔ mLab DaaS @done(19-02-12 17:13)
        GraphQL API:
          ✔ Apollo Server 2, Apollo Client @done(19-02-12 17:27)
          ✔ Subscriptions @done(19-02-12 15:49)
          ☐ defer (server)
          ☐ caching (client)
      Code:
        ✔ Server-Side Rendering of components, styles, state and data @done(19-02-12 15:45)
        ✔ Code splitting, exluded/included in initial render @done(19-02-12 15:45)
        ✔ Web workers, caching (PWA) @done(19-02-12 16:05)
        ☐ Dynamic import(), React.lazy, react-loadable
        ☐ Preloading (fetching server data of unmounted yet components ahead of time)
    UI:
      Performance:
        ✔ Lazy loading with React.Lazy & Suspense @done(19-02-19 21:03)
        ✔ Lazy loading with run-time, variable file names and no code splitting (/* webpackMode: "eager" */): (icons) @done(19-02-19 21:04)
        ✔ Lazy loading of images and of Base64 inline images with blur effect falback @done(19-02-19 21:14)
        ✔ Memoization with React.memo and moize @done(19-02-19 21:06)
      State:
        ✔ Classes @done(19-02-12 17:08)
        ✔ Redux @done(19-02-12 15:53)
        ✔ Hooks @done(19-02-12 16:00)
        ✔ Immer @done(19-02-12 15:54)
      Forms:
        ✔ Formik @done(19-02-12 16:36)
        ✔ My own @done(19-02-12 16:36)
        ✔ Multi-step forms, wizards @done(19-02-12 16:37)
        ✔ Yup @done(19-02-12 16:38)
        ✔ External packages: phone number, pickers, autosuggest, Google places autocomplete @done(19-02-12 16:39)
        ✔ Integrating react-autosuggest with MUI @done(19-02-19 21:08)
        ✔ Integrating both with Google places autocomplete @done(19-02-19 21:09)
      Styling:
        ✔ styled-components, JSS @done(19-02-12 15:56)
        ✔ Material Design concepts, MUI @done(19-02-12 15:56)
        ✔ hooks-based, theme-aware @done(19-02-12 16:23)
        ✔ state-aware styling @done(19-02-12 16:23)
        ✔ injecting custom properties, variants ('styled-system') @done(19-02-12 16:28)
      Static typing:
        ☐ Typescript
      Testing:
      ☐ ???
    Deployment:
      ✔ Heroku @done(19-02-12 15:58)
    Serverless:
      ☐ TBD
  Prove:
    Scores:
    ☐ Lighthouse score
    ☐ PWA check score
  Do:
    Onboarding: 
      Purpose:
        ✔ Conform to self-select model (https://material.io/design/communication/onboarding.html#self-select-model): @done(19-02-26 14:50)
      Forms infrastrcture: 
        Formik:
          ✔ Learn `Formik` @done(19-01-15 13:57)
          ✔ Learn its integration with MUI [There's none] @done(19-01-15 13:58)
          ✔ Decide whether to use it or stick with home-made forms @done(19-01-15 13:58)
          ✔ Document my decision in the proper note @done(19-01-15 13:59)
        HomeMade:
          ✔ Keep the home-made version (Yup.js), don't override it with Formik @done(19-01-20 20:38)
          ✔ Check Formik before doing any of the following @done(19-01-15 13:57)
          ✔ Commit a working form @done(19-01-15 14:14)
          ✘ Replace the link/button duplicate with one single <Link /> component (released today!) @cancelled(19-01-15 14:19)
          ✔ Add a mobile stepper bar (https://material-ui.com/demos/steppers/#mobile-stepper-progress) @done(19-01-15 18:18)
          ✔ Let the mobile stepper button be the link @done(19-01-15 18:18)
          ✔ Make a vertical stepper @started(19-01-15 18:19) @done(19-01-15 20:19) @lasted(2h40s)
          ✔ Formikate VerticalStepper.js (in a separate file!) @started(19-01-16 12:43) @done(19-01-17 16:00) @lasted(1d3h17m40s)
          ✔ concentrate all state handling to a custom hook that's outside of the SearchForm. @done(19-01-17 16:15)
          ✔ Consolidate ProductForm and ServiceForm into one Form whose fields are generated according to 'steps' @done(19-01-20 20:37)
          ✔ Make HoC for injecting state, steps and schema into the generic form utility functions @done(19-01-20 20:37)
          ✘ Extract the state hook into its own separate custom hook @cancelled(19-01-20 20:37)
          ✔ Replace wrapping div with new <Box /> and try to doing w/o makeStyle/useStyles @done(19-01-21 15:02)
          ✔ Solve the red Email issue @done(19-01-27 17:13)
          ✔ Add the atomic MUI component responsible for underline and check it receives status @done(19-01-28 20:56)
          ✔ Move visitUntouched to formUtilities @done(19-01-29 18:14)
          ✔ Make the delivery checkbox a switch @done(19-01-30 14:50)
          ✔ Change the switch helperText color and add a line iff switch is on @done(19-01-30 19:32)
          ✔ Prefix every field with an icon @done(19-02-02 23:33)
          ✔ Make the title & subtitle fonts proportionate to the container @done(19-02-03 12:56)
          ✔ Create a time picker @done(19-02-04 00:50)
          ✔ Apply MD style to the forms' fields by using MUI components for the form @done(19-01-30 19:32)
          ✔ Validate the next two pages @done(19-02-02 23:33)
          ✔ Learn MUI Grid @done(19-01-30 19:32)
          ✔ Add a title, complete the page to adhere to MD's self-select model @done(19-01-30 11:43)
          ✔ Add a results page, which will eventually contain the list returned from server @done(19-02-04 23:53)
          ✔ Move list and scheme creation from caller (e.g., 'Select', 'Delivery') to FormContainer @done(19-03-06 16:29)
      Center selection:
        ✔ Make 'center' a google location box with: @done(19-02-20 17:51)
          ✔ https://github.com/hibiken/react-places-autocomplete#readme @done(19-02-20 17:51)
        ✘ Add a 'look around' switch to first page, that once set, populates center with user's address @cancelled(19-02-20 17:52)
      Currency selection:
        ✔ Make currency selection autocompletable using: @done(19-02-13 11:37)
          ✔ https://material-ui.com/demos/autocomplete/#react-autosuggest @done(19-02-13 11:37)
          ✔ https://github.com/moroshko/react-autosuggest @done(19-02-13 11:37)
        ✔ Use a long (preferrably: all) list of coins @done(19-02-13 11:37)
        ✔ Add descriptions, perhaps more values (I read them anyway!) so user can key-in the description and have the value selected @done(19-02-13 17:15)
        ✔ Update state @done(19-02-13 17:15)
        ✔ Conform to theme (populated value should be blue) @done(19-02-13 23:10)
        ✔ Fetch a long list of fiat currencies @done(19-02-15 03:21)
        ✔ Try using flags if svg and doesn't hit performance @done(19-02-13 17:18)
      Live rates:
        ✔ Show interbank live rate as soon as currency pair is selected - with green and red colors @started(19-02-20 17:52) @done(19-03-03 19:47) @lasted(1w4d1h55m21s)
        ✔ Either move live rates from form header to App bar or better style form header @done(19-03-06 16:28)
    Search:
      GraphQL Server:
        ✔ Update the GraphQL resolver  / mongoose query to address the form's content @done(19-03-20 16:36)
        ✔ Persist redux so it survives page reloads @done(19-03-24 19:00)
        ✔ Support cursor-based pagination (define the page size  in 'results') @done(19-04-28 17:54)
        ✘ Create the live, subscription-based rate server-side query @cancelled(19-07-10 17:28)
        ✘ Update the crypto subscription query (server) @cancelled(19-07-10 17:28)
        ✘ Use the apollo feature that * gradually / lazily * fetches more details (even if not required performance wise) @cancelled(19-07-10 17:28)
      GraphQL Client:
        ✔ Update the GraphQL client gql query to address the form's content @done(19-03-22 01:15)
        ✘ Create the live, subscription-based rate client-side query @cancelled(19-07-10 17:28)
        ✘ Update the crypto subscription query (client) @cancelled(19-07-10 17:28)
      State maintenance:
        ✘ Use Redux to store the received merchants @cancelled(19-03-22 01:17)
        ✘ Instead of the above: fetch selected merchant from the Apollo Cliet cache rather than from the server @cancelled(19-07-10 17:29)
        ✔ Use Immer in the Redux Reducers  [but redux doesn't need Immer as it auto merges others..?] @done(19-06-10 19:33)
        ✘ Update the experience note with Immer, lodash/fp and Immutable. Immer is a must-brag nowadays. @cancelled(19-07-10 17:28)
    List:
      Query:
        ✔ Either place the gql query in the component file (think CC-in-JS) or make the query accept parameters @done(19-04-02 18:04)
        ✔ Respond to query result by displaying a (unedited yet) list of merchants @done(19-04-02 18:04)
      Display:
        ☐ Use Mui 'List' to display the list, and 'Grid' to style each individual list item (https://material-ui.com/layout/grid/#complex-grid) 
      Endless Scrolling and lazy loading (not the same thing):
        ✔ Read about endless scrolling / lazy loading best practices in react: @done(19-04-08 16:56)
        https://addyosmani.com/blog/react-window/ 
        ✔ Try to find an npm package for that, look at 'react-window' and others (npms) @done(19-04-08 16:56)
        ✘ Use <ErrorBoundary>, <Suspense> and React.lazy to lazy-load new merchants when scroll reaches page bottom @cancelled(19-04-08 16:56)
        ✔ use react-window for windowing (= rendering only what's visible with every scroll) @done(19-04-11 15:59)
        ✔ use react-virtualized-auto-sizer to capture all available space if required @done(19-04-11 16:00)
        ✔ Use react-window-infinite-loader for lazy loading (using graphql's implemented pagination) @done(19-04-28 17:53)
        ✘ use react-virtualized/WindowScroller for scroll bar if required @cancelled(19-04-11 16:00)
      List-level operations, using Backdrop:
        ☐ Create an MD backdrop that will enable: sort, filter, change to map (that seems to be the new standard)
      Item-level operations:
        ☐ Enable item reodering if supported by MUI (adding 3-dot 'handlers' that indicate draggability)
        ☐ Enable 'swap to buy' if supported by MUI (reveal an item context menu upon swapping - as in gmail, iOS reminders app etc)
      List-Card transition:
        ✔ Clicking a list item should expand into the merchant's card as in MD specs (https://material.io/design/components/lists.html#behavior) @done(19-07-10 17:34)
        ✔ Expand the place photo in the list into an expanded place photo in the opened card, as I did in Cambiu and as in https://uxdesign.cc/good-to-great-ui-animation-tips-7850805c12e5 @done(19-07-10 17:34)
    Card:
      ✔ Create a merchant card @done(19-07-10 17:34)
      ✔ Include an icon that enables to switch from static to StreetView mode @done(19-08-13 16:21)
      ☐ Fix then check mobile tracking is enabled by just swinging the phone
      ☐ Include an icon that directs to a directions page / sliding window (like google maps app does it when it opens a sliding window in map)
    Map:
      ☐ AppBar - an icon will enable to toggle b/w the default list view to map view
      ☐ Map - a page with a map  centered around user's picked address (not necessarily his current location) and markers for merchants
      ☐ Map - Clicking a marker opens the merchant card page (Merchant component, the very one you get by clicking a list item) 
      ☐ Merchant - Back arrow directs back to either List or Map according to (react router's?) history 
      ☐ Merchant - icon directing to a Directions page / sliding window, enabling to choose b/w walking / driving mode from user's current position to the merchant's shop
      ☐ Directions - when available: enable Live View directions (AR)
    Orders:
      ☐ Use a FAB to order
      ☐ Consider adding a bottom sheet for other activities on the merchant: call, share, review etc (https://material.io/design/components/sheets-bottom.html#dummybodyid)
    Payment: 
      ☐ Consider using stripe for dummy payment (demonstrating a complete eCommerce functionality)
      ☐ Use react-credit-cards for CC data entry
    Header / Footer / Theme:
      ☐ Create a branded header
      ☐ Create a footer with action icons
      ☐ Place a list/map toggle icon on either of them, and let it toggle b/w map | list 
      ☐ Consider making a grey background, or better make two themes, and let the user toggle b/w them
    Communication:
      Banner / Snackbar: 
        ☐ Add a banner / snackbar (depending on whether it's actionable or not) to inform when the desired coin changed price (demonstrate WS / real time)
      Information:
      ☐ Make a reviews page like the one I had in Cambiu
      ☐ Make a live ws-based crypto graph for 3 crypto currencies
    Menu:
      ☐ Consider creating a left-drawer menu
    Progressive Web App (PWA): 
      ✔ Opt-in to use service worker (https://create-react-app.dev/docs/making-a-progressive-web-app) @done(19-09-17 18:16)
      ☐ Check the app's PWA grade (by google)
    Deployment:
      ✔ try ssr at localhost @done(19-09-04 15:33)
      ✔ if succesful, try it at heroku @done(19-09-17 18:16)
      ✔ add ssl to heroku @done(19-09-17 18:16)
      ✔ check panorama is working in heroku @done(19-09-17 18:16)
      ☐ add a first-page to the app
      ✔ exclude everything but that first page from rednering server-side @done(19-09-17 18:16)
      ☐ check "redux-persist failed to create sync storage. falling back to memory storage." -> redux-persist should never be run on the server
      ✔ erase redux persisted memory and check client forgets the flags etc (generated by lists.js) @done(19-09-17 18:17)
      ✔ return lists.js and check lists are loaded propery locally @done(19-09-17 18:17)
      ✔ see lists are loaded at heroku @done(19-09-17 18:17)
      ✔ Go over Deployment TODO note and remove obsolete parts @done(19-09-17 18:18)
      ☐ revert the commit with the window and other solutions
  Consider:
    Pre-rendering:
      ☐ use react-snap to pre-render the first, static page
      ☐ the pre-rendered fist page is the page that should be sent out by the server, not the ssr one
      ☐ ensure ssr is not running (since it will waste time unnessesaraily)
  Delay:
    Sort by quote (Plan A):
      ☐ Construct the recturned records of 'edges', each with its separate cursor and node
      ☐ In other words, return a cursor for *each* record like in https://graphql.org/learn/pagination/#pagination-and-edges 
      ☐ Each record's cursor will include that record's _id and quote values
      ☐ ! Find a way to call the quote instance method from the search static method so it can be used for sorting
      ☐ search.find() should be sorted so that quote < last record/cursor's quote *or* _id > last record/cursor's _id
    Sort by quote (Plan B):
      ☐ Make a process to insert some random margin to each merchant record
      ☐ Use that fixed store margin instead of randomizing it during run time
      ☐ Have .search sort by it (the quotes added later will be ordered to match)
      ☐ Either leave cursor, sorting like Plan A, or give cursors up and just use offsets
    Code Splitting - migrate from react-loadable to React.lazy once the latter supports CS in ssr:
      ☐ Remove all 'react-loadable' legacy code
      ☐ Replace it with React.lazy when ssr-ready
      ☐ Include in initial render only the first page (which by then should be the new page)
      ☐ Check only first page code is sent initially.
    Server-side rendering:
        Styles:
          ☐ server-render styles (https://www.styled-components.com/docs/advanced#server-side-rendering)
          ☐ Avoid discrepancy with client-rendered styles (requires https://www.styled-components.com/docs/tooling#babel-plugin)
    Performance:
      ☐ What is the reason for the 21M
      ☐ Why the unresposiveness and wrong selects
      ☐ Roboto was fetched with all variants
      ☐ Why is Form called for every keystroke
    Desktop:
      ✘ When on desktop, confine display to a left pane and show map with merchants (a-la google maps, old cambiu) @cancelled(19-09-06 00:53)



  


  
